name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Test module imports
      run: |
        echo "Testing module imports..."
        python -c "import main; print('✅ Main module imports successfully')"
        python -c "import modules.fps_boost; print('✅ FPS Boost module imports successfully')"
        python -c "import modules.network_analyzer; print('✅ Network Analyzer module imports successfully')"
        python -c "import modules.ram_cleaner; print('✅ RAM Cleaner module imports successfully')"
        python -c "import modules.lol_optimizer; print('✅ LoL Optimizer module imports successfully')"
        python -c "import modules.config_manager; print('✅ Config Manager module imports successfully')"
        python -c "import modules.settings_dialog; print('✅ Settings Dialog module imports successfully')"
        
    - name: Test FPS Boost functionality
      run: |
        echo "Testing FPS Boost functionality..."
        python -c "
        from modules.fps_boost import FPSBoost
        fps = FPSBoost()
        print('✅ FPS Boost initialized')
        metrics = fps.get_performance_metrics()
        print(f'✅ Performance metrics: {metrics}')
        status = fps.get_optimization_status()
        print(f'✅ Optimization status: {status}')
        "
        
    - name: Test Network Analyzer
      run: |
        echo "Testing Network Analyzer..."
        python -c "
        from modules.network_analyzer import NetworkAnalyzer
        analyzer = NetworkAnalyzer()
        print('✅ Network Analyzer initialized')
        # Test basic functionality without network calls
        print('✅ Network Analyzer test completed')
        "
        
    - name: Test RAM Cleaner
      run: |
        echo "Testing RAM Cleaner..."
        python -c "
        from modules.ram_cleaner import RAMCleaner
        cleaner = RAMCleaner()
        print('✅ RAM Cleaner initialized')
        info = cleaner.get_memory_info()
        print(f'✅ Memory info: {info[:100]}...')
        "
        
    - name: Test LoL Optimizer
      run: |
        echo "Testing LoL Optimizer..."
        python -c "
        from modules.lol_optimizer import LoLOptimizer
        lol = LoLOptimizer()
        print('✅ LoL Optimizer initialized')
        # Test server list
        servers = lol.servers
        print(f'✅ Server list: {list(servers.keys())}')
        "
        
    - name: Test Config Manager
      run: |
        echo "Testing Config Manager..."
        python -c "
        from modules.config_manager import ConfigManager
        config = ConfigManager()
        print('✅ Config Manager initialized')
        settings = config.load_settings()
        print(f'✅ Settings loaded: {len(settings)} items')
        "
        
    - name: Test build process
      run: |
        echo "Testing build process..."
        python build_simple_advanced.py
        echo "✅ Build process completed"
        
    - name: Test executable
      run: |
        echo "Testing executable..."
        if (Test-Path "dist\NGXSMK_GameNet_Optimizer_Advanced.exe") {
          echo "✅ Executable created successfully"
          $fileSize = (Get-Item "dist\NGXSMK_GameNet_Optimizer_Advanced.exe").Length
          echo "File size: $($fileSize / 1MB) MB"
        } else {
          echo "❌ Executable not found"
          exit 1
        }
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: |
          dist/
          *.log
        retention-days: 7
